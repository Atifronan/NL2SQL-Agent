import React, { useState } from 'react';
import { 
  Typography, 
  TextField, 
  Button, 
  Paper, 
  Box, 
  CircularProgress, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  TablePagination,
  Alert,
  Card,
  CardContent
} from '@mui/material';
import { sendQuery } from '../services/api';

function QueryPage() {
  const [query, setQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [result, setResult] = useState(null);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [startTime, setStartTime] = useState(null);
  const [totalTime, setTotalTime] = useState(null);

  const handleQueryChange = (e) => {
    setQuery(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!query.trim()) return;
    
    setLoading(true);
    setError('');
    setResult(null);
    setStartTime(performance.now());
    
    try {
      const data = await sendQuery(query);
      console.log('API Response:', data);
      setResult(data);
      setTotalTime((performance.now() - startTime) / 1000);
    } catch (err) {
      setError(err.message || 'An error occurred while processing your query');
    } finally {
      setLoading(false);
    }
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  const renderResultTable = () => {
    if (!result || !result.data || !result.data.length) return null;

    const columns = Object.keys(result.data[0]);
      return (
      <Box mt={4}>
        <Typography variant="h6" gutterBottom>Results</Typography>
        
        {(result.sql || result.query) && (
          <Paper sx={{ p: 2, mb: 3, bgcolor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
            <Typography variant="h6" color="primary" gutterBottom>
              Generated SQL Query
            </Typography>
            <Box 
              sx={{ 
                p: 2, 
                bgcolor: '#272822', 
                color: '#f8f8f2', 
                borderRadius: 1,
                fontFamily: 'monospace',
                fontSize: '0.9rem',
                overflow: 'auto',
                maxHeight: '200px'
              }}
            >
              <pre style={{ margin: 0 }}>{result.sql || result.query}</pre>
            </Box>
            
            {/* Display the description if available */}
            {result.description && (
              <Box mt={2} p={2} bgcolor="#e3f2fd" borderRadius={1}>
                <Typography variant="subtitle1" color="primary" fontWeight="medium">
                  Query Description:
                </Typography>
                <Typography variant="body2">
                  {result.description}
                </Typography>
              </Box>
            )}
            
            <Box mt={1} display="flex" justifyContent="flex-end">
              <Typography variant="caption" color="text.secondary">
                This SQL query was automatically generated by the AI based on your question
              </Typography>
            </Box>
          </Paper>
        )}
        
        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                {columns.map((column) => (
                  <TableCell key={column}><strong>{column}</strong></TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {result.data
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((row, rowIndex) => (
                  <TableRow key={rowIndex}>
                    {columns.map((column) => (
                      <TableCell key={`${rowIndex}-${column}`}>{row[column]}</TableCell>
                    ))}
                  </TableRow>
                ))}
            </TableBody>
          </Table>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={result.data.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />        </TableContainer>
        
        {(result.processing_time || result.execution_time) && (
          <Box mt={2} display="flex" flexDirection="column" gap={1}>
            <Typography variant="body2" color="text.secondary">
              Server processing time: {(result.processing_time || result.execution_time).toFixed(3)} seconds
            </Typography>
            {totalTime && (
              <Typography variant="body2" color="text.secondary">
                Total round-trip time: {totalTime.toFixed(3)} seconds
              </Typography>
            )}
          </Box>
        )}
      </Box>
    );
  };

  return (
    <div>
      <Typography variant="h4" gutterBottom>
        Query Agent
      </Typography>
      
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="body1" paragraph>
          Ask a question . The AI will provide you with answers.
        </Typography>
        <Alert severity="warning" sx={{ mb: 2 }}>
          <Typography color="error" fontWeight="bold">For Testing Purposes Only</Typography>
        </Alert>
        
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Ask a question"
            variant="outlined"
            value={query}
            onChange={handleQueryChange}
            placeholder="E.g., How many orders were placed last month?"
            disabled={loading}
            sx={{ mb: 2 }}
          />
          <Button 
            type="submit" 
            variant="contained" 
            color="primary" 
            disabled={loading}
          >
            {loading ? <CircularProgress size={24} /> : 'Submit'}
          </Button>        </form>
        <Box mt={1} display="flex" justifyContent="flex-end">
              <Typography 
                variant="caption" 
                sx={{ 
                  color: 'error.main', 
                  fontSize: 'calc(0.75rem * 1.3)', 
                  fontWeight: 'medium'
                }}
              >
                LLM's can make mistakes, please read the generated description to verify.
              </Typography>
            </Box>
      </Paper>
      
      {error && (
        <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
          {error}
        </Alert>
      )}
        {loading && (
        <Box display="flex" justifyContent="center" mt={4}>
          <CircularProgress />
        </Box>
      )}
      
      {!loading && result && (result.sql || result.query) && (!result.data || result.data.length === 0) && (
        <Box mt={4}>
          <Paper sx={{ p: 2, mb: 3, bgcolor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
            <Typography variant="h6" color="primary" gutterBottom>
              Generated SQL Query
            </Typography>
            <Box 
              sx={{ 
                p: 2, 
                bgcolor: '#272822', 
                color: '#f8f8f2', 
                borderRadius: 1,
                fontFamily: 'monospace',
                fontSize: '0.9rem',
                overflow: 'auto',
                maxHeight: '200px'
              }}
            >
              <pre style={{ margin: 0 }}>{result.sql || result.query}</pre>
            </Box>
            
            {/* Display the description if available */}
            {result.description && (
              <Box mt={2} p={2} bgcolor="#e3f2fd" borderRadius={1}>
                <Typography variant="subtitle1" color="primary" fontWeight="medium">
                  Query Description:
                </Typography>
                <Typography variant="body2">
                  {result.description}
                </Typography>
              </Box>
            )}
            
            <Alert severity="info" sx={{ mt: 2 }}>
              The query executed successfully, but no data was returned that matches your criteria.
            </Alert>
          </Paper>
        </Box>
      )}
      
      {result && !result.query && result.description && (
        <Box mt={4}>
          <Alert severity="error">
            <Typography variant="body1" fontWeight="bold">
              {result.description}
            </Typography>
          </Alert>
        </Box>
      )}
      
      {renderResultTable()}
    </div>
  );
}

export default QueryPage;